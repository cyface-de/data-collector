/*
 * Copyright 2021 Cyface GmbH
 *
 * This file is part of the Cyface Data Collector.
 *
 * The Cyface Data Collector is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Cyface Data Collector is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Cyface Data Collector. If not, see <http://www.gnu.org/licenses/>.
 */
package de.cyface.collector;

import io.vertx.ext.auth.HashingStrategy;
import org.junit.jupiter.api.Test;

import java.nio.charset.StandardCharsets;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;

/**
 * @author Armin Schnabel
 */
@SuppressWarnings({"SpellCheckingInspection"})
public class HasherTest {

    /**
     * [DAT-624] The password hashes generated by the `management-API` on S2 have an old format: `F96C2614.....A167`.
     * The hashes generated with the current `Hashes` have a new format: `$pbkdf2$U1VHQVI....`. Both work!
     */
    @Test
    void testHash() {
        // Arrange
        final var salt = "SUGAR";
        final var oocut = new Hasher(HashingStrategy.load(), salt.getBytes(StandardCharsets.UTF_8));

        // Act
        final var password = "secret";
        final var result = oocut.hash(password);

        // Assert
        final var expected = "$pbkdf2$U1VHQVI=$ZK4ZDOf9i3AibLO23RwmTmwfSe4qCQl0Mxl1zSPPW1+tF593v3Ip5RjiWU8j6M251AYjic8V/lhLsxukCpi/Ig";
        assertThat(result, is(equalTo(expected)));
    }
}
