/*
 * Copyright 2018-2021 Cyface GmbH
 * 
 * This file is part of the Cyface Data Collector.
 *
 *  The Cyface Data Collector is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  The Cyface Data Collector is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with the Cyface Data Collector.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * @author Armin Schnabel
 * @version 1.0.0
 * @since 5.3.0
 */

plugins {
    id("java")
    id("application")
    //noinspection SpellCheckingInspection
    id("com.github.johnrengelman.shadow")
    id("maven-publish")
    id("org.jetbrains.kotlin.jvm") version "1.7.20-Beta"
}

// Vert.x Gradle redeploy on file changes, see https://github.com/vert-x3/vertx-examples/tree/master/gradle-redeploy
application {
    mainClassName = 'de.cyface.collector.Application'
}

def mainVerticleName = 'de.cyface.collector.verticle.MainVerticle'
def watchForChange = 'src/**/*'
def doOnChange = './gradlew classes'

run {
    args = ['run', mainVerticleName, "--redeploy=$watchForChange", "--launcher-class=$mainClassName", "--on-redeploy=$doOnChange"]
}

dependencies {
    implementation project(':libs:api')
    implementation "de.cyface:model:$cyfaceSerializationVersion"

    implementation "io.vertx:vertx-web:$vertxVersion"
    implementation "io.vertx:vertx-mongo-client:$vertxVersion"
    implementation "io.vertx:vertx-web-api-contract:$vertxVersion"

    // Kotlin Support
    compile "io.vertx:vertx-core:$vertxVersion"
    compile "io.vertx:vertx-lang-kotlin:$vertxVersion"
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // Authentication
    implementation "io.vertx:vertx-auth-common:$vertxVersion"
    implementation "io.vertx:vertx-auth-mongo:$vertxVersion"
    implementation "io.vertx:vertx-auth-jwt:$vertxVersion"

    // Monitoring + Metrics
    implementation "io.vertx:vertx-micrometer-metrics:$vertxVersion"
    implementation "io.micrometer:micrometer-registry-prometheus:$micrometerVersion"

    // Logging
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "ch.qos.logback:logback-core:$logbackVersion"

    // Utility
    implementation "org.apache.commons:commons-lang3:$commonsLangVersion" // Using Validate

    // Test Dependencies
    testImplementation "io.vertx:vertx-junit5:$vertxVersion"
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "io.vertx:vertx-web-client:$vertxVersion"
    // This is required to run an embedded Mongo instance for integration testing.
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo:$flapdoodleVersion"
}

shadowJar {
    manifest {
        attributes 'Main-Verticle': mainVerticleName
    }
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}

/**
 * This is only used in dev environment.
 * <p>
 * This avoids copying a JAR into `src`.
 */
task copyToDockerBuildFolder(type: Copy) {
    dependsOn shadowJar
    into './build/docker/'
    from './src/main/docker/'
    from shadowJar.outputs
    rename 'collector-(.*)-all.jar','collector-all.jar'
}

publishing {
    publications {
        //noinspection GroovyAssignabilityCheck
        publishExecutable(MavenPublication) {
            //noinspection GroovyAssignabilityCheck
            from components.java
        }
    }
}
