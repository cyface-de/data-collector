# This workflow ensures the building step works
#
# @author Armin Schnabel
# @since 1.2.0
name: Gradle Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout commit
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build with Gradle
        run: ./gradlew build # append `-x test` to skip tests
        env:
          USERNAME: ${{ github.actor }}
          PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      # This following fails with an OOM.
      # A fix is worked on:
      # https://github.com/Kotlin/dokka/pull/2678
      #
      # - name: Create Inline Documentation
      #   run: ./gradlew dokkaHtml
      #   env:
      #     USERNAME: ${{ github.actor }}
      #     PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        # If you're changing the branch from main,
        # also change the `main` in `refs/heads/main`
        # below accordingly.
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./doc/

      - name: Build and start Docker dev environment
        run: |
          cd src/main/docker
          mkdir           logs file-uploads keycloak/providers keycloak/data/h2
          sudo chmod o+w  logs file-uploads keycloak keycloak/data keycloak/data/h2 keycloak/providers
          cd ../../../
          ./gradlew :copyToDockerBuildFolder
          cd build/docker/
          docker compose up -d
        env:        # required for ./gradlew :copyToDockerBuildFolder
          USERNAME: ${{ github.actor }}
          PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      # To ensure we don't kill the entrypoint.sh's attempt to wait for dependencies we wait
      # until the dependencies are up, and the API to started [RFR-566]
      - name: Wait for API to be online (log file created)
        run: |
          FILE_PATH="build/docker/logs/collector.log"
          MAX_TIMEOUT=90 # 1.5 minutes
          SLEEP_INTERVAL=5 # Check every 5 seconds

          elapsed_time=0
          while [ ! -f "$FILE_PATH" ]; do
            echo "Waiting for API and its dependencies to start ... ($elapsed_time/~30 s)"
            sleep "$SLEEP_INTERVAL"
            elapsed_time=$((elapsed_time + SLEEP_INTERVAL))

            if [ "$elapsed_time" -ge "$MAX_TIMEOUT" ]; then
              echo "Timeout exceeded while waiting for $FILE_PATH"
              exit 1
            fi
          done

          echo "$FILE_PATH found."

      - name: Test Docker dev environment (reach OpenAPI page)
        run: |
          sleep 5
          docker ps
          # Grep exits with exit code 0 when the API is started and fails with exit code 1 otherwise
          echo "Try to reach Keycloak at http://localhost:8081/ ..."
          curl -s http://localhost:8081/ | grep -q "Keycloak" #; echo $?
          # Grep exits with exit code 0 when the API is started and fails with exit code 1 otherwise
          echo "Try to reach the Collector API at http://localhost:8080/ ..."
          curl -s http://localhost:8080/ | grep -q "Cyface Data Collector" #; echo $?

      - name: Debugging output (if last step failed)
        if: failure()
        run: |
          cd src/main/docker
          echo "----- src/main/docker ..." && ls -alih ./
          echo "----- logs ..." && ls -alih logs/
          cd keycloak
          echo "----- keycloak ..." && ls -alih ./
          [ -d "providers/" ] && echo "----- providers ..." && ls -alih providers/
          [ -d "data/" ] && echo "----- data ..." && ls -alih data/
          [ -d "data/h2/" ] && echo "----- data/h2 ..." && ls -alih data/h2/
          [ -d "data/import/" ] && echo "----- data/import ..." && ls -alih data/import/
          cd ../../../../
          cd build/docker
          echo "----- build/docker ..." && ls -alih ./
          [ -d "logs/" ] && echo "----- logs ..." && ls -alih logs/
          [ -d "keycloak/" ] && echo "----- keycloak ..." && ls -alih keycloak/
          [ -d "keycloak/data" ] && echo "----- keycloak/data ..." && ls -alih keycloak/data
          [ -d "keycloak/data/h2" ] && echo "----- keycloak/data/h2 ..." && ls -alih keycloak/data/h2
          cd ../../
          echo "----- docker ps"
          docker ps
          echo "----- docker logs collactor_api"
          docker logs collector_api
          echo
          [ -f build/docker/logs/collector.log ] && echo "----- collector.log -----" && cat build/docker/logs/collector.log
          [ -f build/docker/logs/collector-out.log ] && echo "----- collector-out.log -----" && cat build/docker/logs/collector-out.log
          echo && echo "----- curl ***/"
          curl http://localhost:8080/
