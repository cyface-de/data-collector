/*
 * Copyright 2018,2019 Cyface GmbH
 * 
 * This file is part of the Cyface Data Collector.
 *
 *  The Cyface Data Collector is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  The Cyface Data Collector is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with the Cyface Data Collector.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * @author Klemens Muthmann
 * @version 1.0.5
 * @since 2.0.0
 */
plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs' version '4.7.0'
    id 'jacoco'
}

ext {
    // We need to use the SNAPSHOT version, since testing of multipart form uploads is not supported with older versions.
    vertxVersion = '4.0.3'
    micrometerVersion = '1.0.6'
    logbackVersion = '1.2.3'
    commonsLangVersion = '3.8.1'

    junitVersion = '5.7.0'
    hamcrestVersion = '2.2'
    flapdoodleVersion = '3.0.0'

    gradleWrapperVersion = '6.8.3'
}

repositories {
    mavenLocal()
    jcenter()

}

group = 'de.cyface'
version = '5.1.2'

sourceCompatibility = '1.11'
mainClassName = 'de.cyface.collector.Application'

def mainVerticleName = 'de.cyface.collector.verticle.MainVerticle'
def watchForChange = 'src/**/*'
def doOnChange = './gradlew classes'

dependencies {
    implementation "io.vertx:vertx-core:$vertxVersion"
    implementation "io.vertx:vertx-web:$vertxVersion"
    implementation "io.vertx:vertx-mongo-client:$vertxVersion"
    implementation "io.vertx:vertx-web-api-contract:$vertxVersion"

    // Authentication
    implementation "io.vertx:vertx-auth-common:$vertxVersion"
    implementation "io.vertx:vertx-auth-mongo:$vertxVersion"
    implementation "io.vertx:vertx-auth-jwt:$vertxVersion"

    // Monitoring + Metrics
    implementation "io.vertx:vertx-micrometer-metrics:$vertxVersion"
    implementation "io.micrometer:micrometer-registry-prometheus:$micrometerVersion"

    // Logging
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "ch.qos.logback:logback-core:$logbackVersion"

    // Utility
    implementation "org.apache.commons:commons-lang3:$commonsLangVersion" // Using Validate

    // Test Dependencies
    testImplementation "io.vertx:vertx-junit5:$vertxVersion"
    testImplementation platform("org.junit:junit-bom:$junitVersion")
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation "io.vertx:vertx-web-client:$vertxVersion"
    // This is required to run an embedded Mongo instance for integration testing.
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo:$flapdoodleVersion"
    testImplementation "org.hamcrest:hamcrest:$hamcrestVersion"
}

jar {
    manifest {
        attributes 'Main-Verticle': mainVerticleName
    }
}

shadowJar {
    archiveClassifier.set 'fat'

    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
    archiveFileName = "collector-fat.${archiveExtension.get()}"
}

run {
    args = ['run', mainVerticleName, "--redeploy=$watchForChange", "--launcher-class=$mainClassName", "--on-redeploy=$doOnChange"]
}

wrapper {
    gradleVersion = "$gradleWrapperVersion"
}

spotbugsMain {
    reports {
        xml.enabled false
        html.enabled true
    }
}

checkstyle {
    toolVersion "7.6.1"
    // use one common config file for all subprojects
    configFile = project(':').file('config/checkstyle/checkstyle.xml')
    configProperties = ["suppressionFile": project(':').file('config/checkstyle/suppressions.xml')]
}

pmd {
    ignoreFailures = false
    consoleOutput = true
    toolVersion = "6.21.0"
    ruleSetFiles = files('config/pmd.xml')
    rulesMinimumPriority.set 4
    ruleSets = []
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
